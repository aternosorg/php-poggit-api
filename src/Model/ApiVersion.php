<?php
/**
 * ApiVersion
 *
 * PHP version 8.1
 *
 * @package  Aternos\PoggitApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Poggit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\PoggitApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\PoggitApi\ObjectSerializer;

/**
 * ApiVersion Class Doc Comment
 *
 * @package  Aternos\PoggitApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ApiVersion implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ApiVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'description' => 'string[]',
        'php' => 'string[]',
        'incompatible' => 'bool',
        'indev' => 'bool',
        'supported' => 'bool',
        'phar' => '\Aternos\PoggitApi\Model\PharList'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'description' => null,
        'php' => null,
        'incompatible' => null,
        'indev' => null,
        'supported' => null,
        'phar' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'description' => false,
        'php' => false,
        'incompatible' => false,
        'indev' => false,
        'supported' => false,
        'phar' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'php' => 'php',
        'incompatible' => 'incompatible',
        'indev' => 'indev',
        'supported' => 'supported',
        'phar' => 'phar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'php' => 'setPhp',
        'incompatible' => 'setIncompatible',
        'indev' => 'setIndev',
        'supported' => 'setSupported',
        'phar' => 'setPhar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'php' => 'getPhp',
        'incompatible' => 'getIncompatible',
        'indev' => 'getIndev',
        'supported' => 'getSupported',
        'phar' => 'getPhar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('php', $data ?? [], null);
        $this->setIfExists('incompatible', $data ?? [], null);
        $this->setIfExists('indev', $data ?? [], null);
        $this->setIfExists('supported', $data ?? [], null);
        $this->setIfExists('phar', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string[]|null
     */
    public function getDescription(): ?array
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string[]|null $description A string array describing significant API changes in this version.
     *
     * @return $this
     */
    public function setDescription(?array $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets php
     *
     * @return string[]|null
     */
    public function getPhp(): ?array
    {
        return $this->container['php'];
    }

    /**
     * Sets php
     *
     * @param string[]|null $php The minimum minor PHP version required by this version, in each PHP major version.
     *
     * @return $this
     */
    public function setPhp(?array $php): static
    {
        if (is_null($php)) {
            throw new InvalidArgumentException('non-nullable php cannot be null');
        }
        $this->container['php'] = $php;

        return $this;
    }

    /**
     * Gets incompatible
     *
     * @return bool|null
     */
    public function getIncompatible(): ?bool
    {
        return $this->container['incompatible'];
    }

    /**
     * Sets incompatible
     *
     * @param bool|null $incompatible For the nth version, if incompatible is false, any plugins that support the (n-1)th version should also support it. This also indicates that if a plugin declares support for a certaion version, it also supports the subsequent versions until the next one with incompatible: true.
     *
     * @return $this
     */
    public function setIncompatible(?bool $incompatible): static
    {
        if (is_null($incompatible)) {
            throw new InvalidArgumentException('non-nullable incompatible cannot be null');
        }
        $this->container['incompatible'] = $incompatible;

        return $this;
    }

    /**
     * Gets indev
     *
     * @return bool|null
     */
    public function getIndev(): ?bool
    {
        return $this->container['indev'];
    }

    /**
     * Sets indev
     *
     * @param bool|null $indev Whether the API has been finalized.
     *
     * @return $this
     */
    public function setIndev(?bool $indev): static
    {
        if (is_null($indev)) {
            throw new InvalidArgumentException('non-nullable indev cannot be null');
        }
        $this->container['indev'] = $indev;

        return $this;
    }

    /**
     * Gets supported
     *
     * @return bool|null
     */
    public function getSupported(): ?bool
    {
        return $this->container['supported'];
    }

    /**
     * Sets supported
     *
     * @param bool|null $supported supported
     *
     * @return $this
     */
    public function setSupported(?bool $supported): static
    {
        if (is_null($supported)) {
            throw new InvalidArgumentException('non-nullable supported cannot be null');
        }
        $this->container['supported'] = $supported;

        return $this;
    }

    /**
     * Gets phar
     *
     * @return \Aternos\PoggitApi\Model\PharList|null
     */
    public function getPhar(): ?\Aternos\PoggitApi\Model\PharList
    {
        return $this->container['phar'];
    }

    /**
     * Sets phar
     *
     * @param \Aternos\PoggitApi\Model\PharList|null $phar phar
     *
     * @return $this
     */
    public function setPhar(?\Aternos\PoggitApi\Model\PharList $phar): static
    {
        if (is_null($phar)) {
            throw new InvalidArgumentException('non-nullable phar cannot be null');
        }
        $this->container['phar'] = $phar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


