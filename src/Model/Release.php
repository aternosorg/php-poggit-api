<?php
/**
 * Release
 *
 * PHP version 8.1
 *
 * @package  Aternos\PoggitApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Poggit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\PoggitApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\PoggitApi\ObjectSerializer;

/**
 * Release Class Doc Comment
 *
 * @package  Aternos\PoggitApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Release implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Release';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'version' => 'string',
        'html_url' => 'string',
        'tagline' => 'string',
        'artifact_url' => 'string',
        'downloads' => 'int',
        'score' => 'int',
        'repo_id' => 'int',
        'repo_name' => 'string',
        'project_id' => 'int',
        'project_name' => 'string',
        'build_id' => 'int',
        'build_number' => 'int',
        'build_commit' => 'string',
        'description_url' => 'string',
        'icon_url' => 'string',
        'changelog_url' => 'string',
        'license' => 'string',
        'license_url' => 'string',
        'is_obsolete' => 'bool',
        'is_pre_release' => 'bool',
        'is_outdated' => 'bool',
        'is_official' => 'bool',
        'submission_date' => 'int',
        'state' => '\Aternos\PoggitApi\Model\State',
        'last_state_change_date' => 'int',
        'categories' => '\Aternos\PoggitApi\Model\Category[]',
        'keywords' => 'string[]',
        'api' => '\Aternos\PoggitApi\Model\ReleaseApiInner[]',
        'deps' => '\Aternos\PoggitApi\Model\Dependency[]',
        'producers' => '\Aternos\PoggitApi\Model\ReleaseProducers',
        'state_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'version' => 'version',
        'html_url' => 'uri',
        'tagline' => null,
        'artifact_url' => 'uri',
        'downloads' => null,
        'score' => null,
        'repo_id' => null,
        'repo_name' => null,
        'project_id' => null,
        'project_name' => null,
        'build_id' => null,
        'build_number' => null,
        'build_commit' => null,
        'description_url' => 'uri',
        'icon_url' => 'uri',
        'changelog_url' => 'uri',
        'license' => null,
        'license_url' => 'uri',
        'is_obsolete' => null,
        'is_pre_release' => null,
        'is_outdated' => null,
        'is_official' => null,
        'submission_date' => null,
        'state' => null,
        'last_state_change_date' => null,
        'categories' => null,
        'keywords' => null,
        'api' => null,
        'deps' => null,
        'producers' => null,
        'state_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'version' => false,
        'html_url' => false,
        'tagline' => false,
        'artifact_url' => false,
        'downloads' => false,
        'score' => false,
        'repo_id' => false,
        'repo_name' => false,
        'project_id' => false,
        'project_name' => false,
        'build_id' => false,
        'build_number' => false,
        'build_commit' => false,
        'description_url' => false,
        'icon_url' => true,
        'changelog_url' => false,
        'license' => false,
        'license_url' => false,
        'is_obsolete' => false,
        'is_pre_release' => false,
        'is_outdated' => false,
        'is_official' => false,
        'submission_date' => false,
        'state' => false,
        'last_state_change_date' => false,
        'categories' => false,
        'keywords' => false,
        'api' => false,
        'deps' => false,
        'producers' => false,
        'state_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'version' => 'version',
        'html_url' => 'html_url',
        'tagline' => 'tagline',
        'artifact_url' => 'artifact_url',
        'downloads' => 'downloads',
        'score' => 'score',
        'repo_id' => 'repo_id',
        'repo_name' => 'repo_name',
        'project_id' => 'project_id',
        'project_name' => 'project_name',
        'build_id' => 'build_id',
        'build_number' => 'build_number',
        'build_commit' => 'build_commit',
        'description_url' => 'description_url',
        'icon_url' => 'icon_url',
        'changelog_url' => 'changelog_url',
        'license' => 'license',
        'license_url' => 'license_url',
        'is_obsolete' => 'is_obsolete',
        'is_pre_release' => 'is_pre_release',
        'is_outdated' => 'is_outdated',
        'is_official' => 'is_official',
        'submission_date' => 'submission_date',
        'state' => 'state',
        'last_state_change_date' => 'last_state_change_date',
        'categories' => 'categories',
        'keywords' => 'keywords',
        'api' => 'api',
        'deps' => 'deps',
        'producers' => 'producers',
        'state_name' => 'state_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'version' => 'setVersion',
        'html_url' => 'setHtmlUrl',
        'tagline' => 'setTagline',
        'artifact_url' => 'setArtifactUrl',
        'downloads' => 'setDownloads',
        'score' => 'setScore',
        'repo_id' => 'setRepoId',
        'repo_name' => 'setRepoName',
        'project_id' => 'setProjectId',
        'project_name' => 'setProjectName',
        'build_id' => 'setBuildId',
        'build_number' => 'setBuildNumber',
        'build_commit' => 'setBuildCommit',
        'description_url' => 'setDescriptionUrl',
        'icon_url' => 'setIconUrl',
        'changelog_url' => 'setChangelogUrl',
        'license' => 'setLicense',
        'license_url' => 'setLicenseUrl',
        'is_obsolete' => 'setIsObsolete',
        'is_pre_release' => 'setIsPreRelease',
        'is_outdated' => 'setIsOutdated',
        'is_official' => 'setIsOfficial',
        'submission_date' => 'setSubmissionDate',
        'state' => 'setState',
        'last_state_change_date' => 'setLastStateChangeDate',
        'categories' => 'setCategories',
        'keywords' => 'setKeywords',
        'api' => 'setApi',
        'deps' => 'setDeps',
        'producers' => 'setProducers',
        'state_name' => 'setStateName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'version' => 'getVersion',
        'html_url' => 'getHtmlUrl',
        'tagline' => 'getTagline',
        'artifact_url' => 'getArtifactUrl',
        'downloads' => 'getDownloads',
        'score' => 'getScore',
        'repo_id' => 'getRepoId',
        'repo_name' => 'getRepoName',
        'project_id' => 'getProjectId',
        'project_name' => 'getProjectName',
        'build_id' => 'getBuildId',
        'build_number' => 'getBuildNumber',
        'build_commit' => 'getBuildCommit',
        'description_url' => 'getDescriptionUrl',
        'icon_url' => 'getIconUrl',
        'changelog_url' => 'getChangelogUrl',
        'license' => 'getLicense',
        'license_url' => 'getLicenseUrl',
        'is_obsolete' => 'getIsObsolete',
        'is_pre_release' => 'getIsPreRelease',
        'is_outdated' => 'getIsOutdated',
        'is_official' => 'getIsOfficial',
        'submission_date' => 'getSubmissionDate',
        'state' => 'getState',
        'last_state_change_date' => 'getLastStateChangeDate',
        'categories' => 'getCategories',
        'keywords' => 'getKeywords',
        'api' => 'getApi',
        'deps' => 'getDeps',
        'producers' => 'getProducers',
        'state_name' => 'getStateName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('html_url', $data ?? [], null);
        $this->setIfExists('tagline', $data ?? [], null);
        $this->setIfExists('artifact_url', $data ?? [], null);
        $this->setIfExists('downloads', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('repo_id', $data ?? [], null);
        $this->setIfExists('repo_name', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('project_name', $data ?? [], null);
        $this->setIfExists('build_id', $data ?? [], null);
        $this->setIfExists('build_number', $data ?? [], null);
        $this->setIfExists('build_commit', $data ?? [], null);
        $this->setIfExists('description_url', $data ?? [], null);
        $this->setIfExists('icon_url', $data ?? [], null);
        $this->setIfExists('changelog_url', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('license_url', $data ?? [], null);
        $this->setIfExists('is_obsolete', $data ?? [], null);
        $this->setIfExists('is_pre_release', $data ?? [], null);
        $this->setIfExists('is_outdated', $data ?? [], null);
        $this->setIfExists('is_official', $data ?? [], null);
        $this->setIfExists('submission_date', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('last_state_change_date', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('api', $data ?? [], null);
        $this->setIfExists('deps', $data ?? [], null);
        $this->setIfExists('producers', $data ?? [], null);
        $this->setIfExists('state_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['html_url'] === null) {
            $invalidProperties[] = "'html_url' can't be null";
        }
        if ($this->container['tagline'] === null) {
            $invalidProperties[] = "'tagline' can't be null";
        }
        if ($this->container['artifact_url'] === null) {
            $invalidProperties[] = "'artifact_url' can't be null";
        }
        if ($this->container['downloads'] === null) {
            $invalidProperties[] = "'downloads' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalidProperties[] = "'score' can't be null";
        }
        if ($this->container['repo_id'] === null) {
            $invalidProperties[] = "'repo_id' can't be null";
        }
        if ($this->container['repo_name'] === null) {
            $invalidProperties[] = "'repo_name' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['project_name'] === null) {
            $invalidProperties[] = "'project_name' can't be null";
        }
        if ($this->container['build_id'] === null) {
            $invalidProperties[] = "'build_id' can't be null";
        }
        if ($this->container['build_number'] === null) {
            $invalidProperties[] = "'build_number' can't be null";
        }
        if ($this->container['build_commit'] === null) {
            $invalidProperties[] = "'build_commit' can't be null";
        }
        if ($this->container['description_url'] === null) {
            $invalidProperties[] = "'description_url' can't be null";
        }
        if ($this->container['icon_url'] === null) {
            $invalidProperties[] = "'icon_url' can't be null";
        }
        if ($this->container['is_obsolete'] === null) {
            $invalidProperties[] = "'is_obsolete' can't be null";
        }
        if ($this->container['is_pre_release'] === null) {
            $invalidProperties[] = "'is_pre_release' can't be null";
        }
        if ($this->container['is_outdated'] === null) {
            $invalidProperties[] = "'is_outdated' can't be null";
        }
        if ($this->container['is_official'] === null) {
            $invalidProperties[] = "'is_official' can't be null";
        }
        if ($this->container['submission_date'] === null) {
            $invalidProperties[] = "'submission_date' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['last_state_change_date'] === null) {
            $invalidProperties[] = "'last_state_change_date' can't be null";
        }
        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        if ($this->container['keywords'] === null) {
            $invalidProperties[] = "'keywords' can't be null";
        }
        if ($this->container['api'] === null) {
            $invalidProperties[] = "'api' can't be null";
        }
        if ($this->container['deps'] === null) {
            $invalidProperties[] = "'deps' can't be null";
        }
        if ($this->container['producers'] === null) {
            $invalidProperties[] = "'producers' can't be null";
        }
        if ($this->container['state_name'] === null) {
            $invalidProperties[] = "'state_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion(): string
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion(string $version): static
    {
        if (is_null($version)) {
            throw new InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string
     */
    public function getHtmlUrl(): string
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string $html_url html_url
     *
     * @return $this
     */
    public function setHtmlUrl(string $html_url): static
    {
        if (is_null($html_url)) {
            throw new InvalidArgumentException('non-nullable html_url cannot be null');
        }
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string
     */
    public function getTagline(): string
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string $tagline tagline
     *
     * @return $this
     */
    public function setTagline(string $tagline): static
    {
        if (is_null($tagline)) {
            throw new InvalidArgumentException('non-nullable tagline cannot be null');
        }
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets artifact_url
     *
     * @return string
     */
    public function getArtifactUrl(): string
    {
        return $this->container['artifact_url'];
    }

    /**
     * Sets artifact_url
     *
     * @param string $artifact_url artifact_url
     *
     * @return $this
     */
    public function setArtifactUrl(string $artifact_url): static
    {
        if (is_null($artifact_url)) {
            throw new InvalidArgumentException('non-nullable artifact_url cannot be null');
        }
        $this->container['artifact_url'] = $artifact_url;

        return $this;
    }

    /**
     * Gets downloads
     *
     * @return int
     */
    public function getDownloads(): int
    {
        return $this->container['downloads'];
    }

    /**
     * Sets downloads
     *
     * @param int $downloads downloads
     *
     * @return $this
     */
    public function setDownloads(int $downloads): static
    {
        if (is_null($downloads)) {
            throw new InvalidArgumentException('non-nullable downloads cannot be null');
        }
        $this->container['downloads'] = $downloads;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int
     */
    public function getScore(): int
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score score
     *
     * @return $this
     */
    public function setScore(int $score): static
    {
        if (is_null($score)) {
            throw new InvalidArgumentException('non-nullable score cannot be null');
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets repo_id
     *
     * @return int
     */
    public function getRepoId(): int
    {
        return $this->container['repo_id'];
    }

    /**
     * Sets repo_id
     *
     * @param int $repo_id repo_id
     *
     * @return $this
     */
    public function setRepoId(int $repo_id): static
    {
        if (is_null($repo_id)) {
            throw new InvalidArgumentException('non-nullable repo_id cannot be null');
        }
        $this->container['repo_id'] = $repo_id;

        return $this;
    }

    /**
     * Gets repo_name
     *
     * @return string
     */
    public function getRepoName(): string
    {
        return $this->container['repo_name'];
    }

    /**
     * Sets repo_name
     *
     * @param string $repo_name repo_name
     *
     * @return $this
     */
    public function setRepoName(string $repo_name): static
    {
        if (is_null($repo_name)) {
            throw new InvalidArgumentException('non-nullable repo_name cannot be null');
        }
        $this->container['repo_name'] = $repo_name;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int
     */
    public function getProjectId(): int
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int $project_id project_id
     *
     * @return $this
     */
    public function setProjectId(int $project_id): static
    {
        if (is_null($project_id)) {
            throw new InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName(): string
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName(string $project_name): static
    {
        if (is_null($project_name)) {
            throw new InvalidArgumentException('non-nullable project_name cannot be null');
        }
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets build_id
     *
     * @return int
     */
    public function getBuildId(): int
    {
        return $this->container['build_id'];
    }

    /**
     * Sets build_id
     *
     * @param int $build_id build_id
     *
     * @return $this
     */
    public function setBuildId(int $build_id): static
    {
        if (is_null($build_id)) {
            throw new InvalidArgumentException('non-nullable build_id cannot be null');
        }
        $this->container['build_id'] = $build_id;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return int
     */
    public function getBuildNumber(): int
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param int $build_number build_number
     *
     * @return $this
     */
    public function setBuildNumber(int $build_number): static
    {
        if (is_null($build_number)) {
            throw new InvalidArgumentException('non-nullable build_number cannot be null');
        }
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets build_commit
     *
     * @return string
     */
    public function getBuildCommit(): string
    {
        return $this->container['build_commit'];
    }

    /**
     * Sets build_commit
     *
     * @param string $build_commit build_commit
     *
     * @return $this
     */
    public function setBuildCommit(string $build_commit): static
    {
        if (is_null($build_commit)) {
            throw new InvalidArgumentException('non-nullable build_commit cannot be null');
        }
        $this->container['build_commit'] = $build_commit;

        return $this;
    }

    /**
     * Gets description_url
     *
     * @return string
     */
    public function getDescriptionUrl(): string
    {
        return $this->container['description_url'];
    }

    /**
     * Sets description_url
     *
     * @param string $description_url description_url
     *
     * @return $this
     */
    public function setDescriptionUrl(string $description_url): static
    {
        if (is_null($description_url)) {
            throw new InvalidArgumentException('non-nullable description_url cannot be null');
        }
        $this->container['description_url'] = $description_url;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string
     */
    public function getIconUrl(): ?string
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string $icon_url icon_url
     *
     * @return $this
     */
    public function setIconUrl(?string $icon_url): static
    {
        if (is_null($icon_url)) {
            array_push($this->openAPINullablesSetToNull, 'icon_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets changelog_url
     *
     * @return string|null
     */
    public function getChangelogUrl(): ?string
    {
        return $this->container['changelog_url'];
    }

    /**
     * Sets changelog_url
     *
     * @param string|null $changelog_url changelog_url
     *
     * @return $this
     */
    public function setChangelogUrl(?string $changelog_url): static
    {
        if (is_null($changelog_url)) {
            throw new InvalidArgumentException('non-nullable changelog_url cannot be null');
        }
        $this->container['changelog_url'] = $changelog_url;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense(): ?string
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license license
     *
     * @return $this
     */
    public function setLicense(?string $license): static
    {
        if (is_null($license)) {
            throw new InvalidArgumentException('non-nullable license cannot be null');
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets license_url
     *
     * @return string|null
     */
    public function getLicenseUrl(): ?string
    {
        return $this->container['license_url'];
    }

    /**
     * Sets license_url
     *
     * @param string|null $license_url license_url
     *
     * @return $this
     */
    public function setLicenseUrl(?string $license_url): static
    {
        if (is_null($license_url)) {
            throw new InvalidArgumentException('non-nullable license_url cannot be null');
        }
        $this->container['license_url'] = $license_url;

        return $this;
    }

    /**
     * Gets is_obsolete
     *
     * @return bool
     */
    public function getIsObsolete(): bool
    {
        return $this->container['is_obsolete'];
    }

    /**
     * Sets is_obsolete
     *
     * @param bool $is_obsolete is_obsolete
     *
     * @return $this
     */
    public function setIsObsolete(bool $is_obsolete): static
    {
        if (is_null($is_obsolete)) {
            throw new InvalidArgumentException('non-nullable is_obsolete cannot be null');
        }
        $this->container['is_obsolete'] = $is_obsolete;

        return $this;
    }

    /**
     * Gets is_pre_release
     *
     * @return bool
     */
    public function getIsPreRelease(): bool
    {
        return $this->container['is_pre_release'];
    }

    /**
     * Sets is_pre_release
     *
     * @param bool $is_pre_release is_pre_release
     *
     * @return $this
     */
    public function setIsPreRelease(bool $is_pre_release): static
    {
        if (is_null($is_pre_release)) {
            throw new InvalidArgumentException('non-nullable is_pre_release cannot be null');
        }
        $this->container['is_pre_release'] = $is_pre_release;

        return $this;
    }

    /**
     * Gets is_outdated
     *
     * @return bool
     */
    public function getIsOutdated(): bool
    {
        return $this->container['is_outdated'];
    }

    /**
     * Sets is_outdated
     *
     * @param bool $is_outdated is_outdated
     *
     * @return $this
     */
    public function setIsOutdated(bool $is_outdated): static
    {
        if (is_null($is_outdated)) {
            throw new InvalidArgumentException('non-nullable is_outdated cannot be null');
        }
        $this->container['is_outdated'] = $is_outdated;

        return $this;
    }

    /**
     * Gets is_official
     *
     * @return bool
     */
    public function getIsOfficial(): bool
    {
        return $this->container['is_official'];
    }

    /**
     * Sets is_official
     *
     * @param bool $is_official is_official
     *
     * @return $this
     */
    public function setIsOfficial(bool $is_official): static
    {
        if (is_null($is_official)) {
            throw new InvalidArgumentException('non-nullable is_official cannot be null');
        }
        $this->container['is_official'] = $is_official;

        return $this;
    }

    /**
     * Gets submission_date
     *
     * @return int
     */
    public function getSubmissionDate(): int
    {
        return $this->container['submission_date'];
    }

    /**
     * Sets submission_date
     *
     * @param int $submission_date Date as unix timestamp
     *
     * @return $this
     */
    public function setSubmissionDate(int $submission_date): static
    {
        if (is_null($submission_date)) {
            throw new InvalidArgumentException('non-nullable submission_date cannot be null');
        }
        $this->container['submission_date'] = $submission_date;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Aternos\PoggitApi\Model\State
     */
    public function getState(): \Aternos\PoggitApi\Model\State
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Aternos\PoggitApi\Model\State $state state
     *
     * @return $this
     */
    public function setState(\Aternos\PoggitApi\Model\State $state): static
    {
        if (is_null($state)) {
            throw new InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets last_state_change_date
     *
     * @return int
     */
    public function getLastStateChangeDate(): int
    {
        return $this->container['last_state_change_date'];
    }

    /**
     * Sets last_state_change_date
     *
     * @param int $last_state_change_date Date as unix timestamp
     *
     * @return $this
     */
    public function setLastStateChangeDate(int $last_state_change_date): static
    {
        if (is_null($last_state_change_date)) {
            throw new InvalidArgumentException('non-nullable last_state_change_date cannot be null');
        }
        $this->container['last_state_change_date'] = $last_state_change_date;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Aternos\PoggitApi\Model\Category[]
     */
    public function getCategories(): array
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Aternos\PoggitApi\Model\Category[] $categories categories
     *
     * @return $this
     */
    public function setCategories(array $categories): static
    {
        if (is_null($categories)) {
            throw new InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]
     */
    public function getKeywords(): array
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[] $keywords keywords
     *
     * @return $this
     */
    public function setKeywords(array $keywords): static
    {
        if (is_null($keywords)) {
            throw new InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets api
     *
     * @return \Aternos\PoggitApi\Model\ReleaseApiInner[]
     */
    public function getApi(): array
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     *
     * @param \Aternos\PoggitApi\Model\ReleaseApiInner[] $api api
     *
     * @return $this
     */
    public function setApi(array $api): static
    {
        if (is_null($api)) {
            throw new InvalidArgumentException('non-nullable api cannot be null');
        }
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets deps
     *
     * @return \Aternos\PoggitApi\Model\Dependency[]
     */
    public function getDeps(): array
    {
        return $this->container['deps'];
    }

    /**
     * Sets deps
     *
     * @param \Aternos\PoggitApi\Model\Dependency[] $deps deps
     *
     * @return $this
     */
    public function setDeps(array $deps): static
    {
        if (is_null($deps)) {
            throw new InvalidArgumentException('non-nullable deps cannot be null');
        }
        $this->container['deps'] = $deps;

        return $this;
    }

    /**
     * Gets producers
     *
     * @return \Aternos\PoggitApi\Model\ReleaseProducers
     */
    public function getProducers(): \Aternos\PoggitApi\Model\ReleaseProducers
    {
        return $this->container['producers'];
    }

    /**
     * Sets producers
     *
     * @param \Aternos\PoggitApi\Model\ReleaseProducers $producers producers
     *
     * @return $this
     */
    public function setProducers(\Aternos\PoggitApi\Model\ReleaseProducers $producers): static
    {
        if (is_null($producers)) {
            throw new InvalidArgumentException('non-nullable producers cannot be null');
        }
        $this->container['producers'] = $producers;

        return $this;
    }

    /**
     * Gets state_name
     *
     * @return string
     */
    public function getStateName(): string
    {
        return $this->container['state_name'];
    }

    /**
     * Sets state_name
     *
     * @param string $state_name state_name
     *
     * @return $this
     */
    public function setStateName(string $state_name): static
    {
        if (is_null($state_name)) {
            throw new InvalidArgumentException('non-nullable state_name cannot be null');
        }
        $this->container['state_name'] = $state_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


